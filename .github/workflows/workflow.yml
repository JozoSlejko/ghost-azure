name: deploy-ghost-azure
concurrency: ghost-azure

on: 
  push:
    branches: 
      - main

env:
  AZURE_DEV_RESOURCEGROUP_NAME: j-ghost-dev-rg-01
  AZURE_PROD_RESOURCEGROUP_NAME: j-ghost-prod-rg-01
  APP_NAME_PREFIX: ghost
  SLOT_ENABLED: 'Yes'
  GHOST_CONTAINER: ghost:4.29.0-alpine
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'function'
  AAD_TENANT: '82850fa2-55e9-4b75-bd6b-98c6cc219872'
  DEV_SP_ID: '28bdb590-552f-4919-b983-305caab5111a'

jobs:
  # Lint the Bicep file.
  lint: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run Bicep linter
      run: az bicep build --file ./main.bicep

  # Validate the dev/test template
  validate-dev: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
    - uses: azure/arm-deploy@v1
      name: Run preflight validation
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.AZURE_DEV_RESOURCEGROUP_NAME }}
        template: ./main.bicep
        parameters: environmentName=Development
                    applicationNamePrefix=${{ env.APP_NAME_PREFIX }}
                    webSlotEnabled=${{ env.SLOT_ENABLED }}
                    databasePassword=${{ secrets.DATABASEPASSWORD }}
                    ghostContainerName=${{ env.GHOST_CONTAINER }}
                    tenantID=${{ env.AAD_TENANT }}
                    spId=${{ env.DEV_SP_ID }}
                    spPassword=${{ secrets.DEV_SP_PASSWORD }}
                    appPassword==${{ secrets.DEV_APP_PASSWORD }}
        deploymentMode: Validate

  # Run the what-if of the dev/test template
  preview-dev:
    runs-on: ubuntu-latest
    needs: [lint, validate-dev]
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
    - uses: Azure/cli@v1
      name: Run what-if
      with:
        inlineScript: |
            az deployment group what-if \
              --resource-group ${{ env.AZURE_DEV_RESOURCEGROUP_NAME }} \
              --template-file main.bicep \
              --parameters environmentName=Development \
                           applicationNamePrefix=${{ env.APP_NAME_PREFIX }} \
                           webSlotEnabled=${{ env.SLOT_ENABLED }} \
                           databasePassword=${{ secrets.DATABASEPASSWORD }} \
                           ghostContainerName=${{ env.GHOST_CONTAINER }}
                           tenantID=${{ env.AAD_TENANT }}
                           spId=${{ env.DEV_SP_ID }}
                           spPassword=${{ secrets.DEV_SP_PASSWORD }}
                           appPassword==${{ secrets.DEV_APP_PASSWORD }}

  # Deploy the dev/test bicep template
  deploy-dev:
    runs-on: ubuntu-latest
    needs: preview-dev
    outputs:
      endpointHostName: ${{ steps.deploy.outputs.endpointHostName }}
      faName: ${{ steps.deploy.outputs.faName }}
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
    - uses: azure/arm-deploy@v1
      id: deploy
      name: Deploy dev environment
      with:
        failOnStdErr: false
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.AZURE_DEV_RESOURCEGROUP_NAME }}
        template: ./main.bicep
        parameters: environmentName=Development
                    applicationNamePrefix=${{ env.APP_NAME_PREFIX }}
                    webSlotEnabled=${{ env.SLOT_ENABLED }}
                    databasePassword=${{ secrets.DATABASEPASSWORD }}
                    ghostContainerName=${{ env.GHOST_CONTAINER }}
                    tenantID=${{ env.AAD_TENANT }}
                    spId=${{ env.DEV_SP_ID }}
                    spPassword=${{ secrets.DEV_SP_PASSWORD }}
                    appPassword==${{ secrets.DEV_APP_PASSWORD }}

# Deploy the dev/test function code
  deploy-function-dev:
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
    - name: Setup Node 16 Environment
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    - name: 'Resolve Project Dependencies Using Npm'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        popd
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{needs.deploy-dev.outputs.faName}}
        package: './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        respect-funcignore: true



  # Run the dev/test smoke test
  smoke-test:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-function-dev]
    steps: 
    - uses: actions/checkout@v2
    - run: |
        $container = New-PesterContainer `
          -Path 'tests/Website.Tests.ps1' `
          -Data @{ HostName = '${{needs.deploy-dev.outputs.endpointHostName}}' }
        Invoke-Pester `
          -Container $container `
          -CI
      name: Run smoke tests
      shell: pwsh
